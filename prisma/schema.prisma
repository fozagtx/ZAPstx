// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  username      String?   @unique
  stacksAddress String    @unique
  image         String?
  bio           String?   @db.Text
  website       String?
  twitter       String?
  verified      Boolean   @default(false)
  emailVerified DateTime?
  onboarded     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  payments      Payment[]
  paymentLinks  PaymentLink[]
  widgets       Widget[]
  notifications Notification[]
  
  // Analytics
  totalEarnings Decimal @default(0) @db.Decimal(15, 8)
  totalPayments Int     @default(0)
  
  @@map("zapx_users")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(15, 8)
  feeAmount     Decimal       @default(0) @db.Decimal(15, 8)
  netAmount     Decimal       @db.Decimal(15, 8)
  currency      String        @default("SBTC")
  description   String?
  status        PaymentStatus @default(PENDING)
  
  // Blockchain data
  txId          String?       @unique
  blockHeight   BigInt?
  confirmations Int           @default(0)
  fromAddress   String?
  toAddress     String?
  
  // Payment link data
  paymentLinkId String?
  paymentLink   PaymentLink?  @relation(fields: [paymentLinkId], references: [id])
  widgetId      String?
  
  // Metadata
  metadata      Json?
  ipAddress     String?
  userAgent     String?       @db.Text
  
  // Timestamps
  expiresAt     DateTime?
  createdAt     DateTime      @default(now())
  completedAt   DateTime?
  
  // Relations
  userId        String?
  user          User?         @relation(fields: [userId], references: [id])
  
  @@index([status])
  @@index([userId])
  @@index([paymentLinkId])
  @@index([txId])
  @@index([createdAt])
  @@map("zapx_payments")
}

model PaymentLink {
  id          String            @id @default(cuid())
  title       String
  description String?           @db.Text
  amount      Decimal           @db.Decimal(15, 8)
  currency    String            @default("SBTC")
  slug        String            @unique
  
  // Configuration
  active      Boolean           @default(true)
  expiresAt   DateTime?
  maxUses     Int?
  currentUses Int               @default(0)
  
  // Customization
  theme       String            @default("default")
  customCSS   String?           @db.Text
  logoUrl     String?
  
  // Webhook settings
  webhookUrl  String?
  webhookSecret String?
  
  // Success/redirect settings
  successUrl    String?
  successMessage String?        @db.Text
  
  // Analytics
  viewCount     Int             @default(0)
  conversionRate Decimal?       @default(0) @db.Decimal(5, 4)
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments    Payment[]
  
  @@index([userId])
  @@index([active])
  @@index([slug])
  @@index([createdAt])
  @@map("zapx_payment_links")
}

model Widget {
  id          String    @id @default(cuid())
  name        String
  description String?
  theme       String    @default("default")
  customCSS   String?   @db.Text
  settings    Json
  active      Boolean   @default(true)
  
  // Configuration for embedded widgets
  allowedOrigins String[] @default([])
  rateLimit     Int?     @default(100) // requests per hour
  
  // Usage stats
  impressions Int       @default(0)
  conversions Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([active])
  @@map("zapx_widgets")
}

model Notification {
  id        String             @id @default(cuid())
  title     String
  message   String             @db.Text
  type      NotificationType
  read      Boolean            @default(false)
  data      Json?
  createdAt DateTime           @default(now())
  
  // Relations
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@map("zapx_notifications")
}

model Analytics {
  id        String      @id @default(cuid())
  event     String
  data      Json
  createdAt DateTime    @default(now())
  
  @@index([event])
  @@index([createdAt])
  @@map("zapx_analytics")
}

// Transaction monitoring for real-time processing
model Transaction {
  id            String              @id @default(cuid())
  txId          String              @unique
  status        TransactionStatus   @default(PENDING)
  amount        Decimal             @db.Decimal(15, 8)
  fromAddress   String
  toAddress     String
  blockHeight   BigInt?
  confirmations Int                 @default(0)
  
  // Metadata
  rawTxData     Json?
  
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  @@index([txId])
  @@index([status])
  @@index([toAddress])
  @@index([blockHeight])
  @@map("zapx_transactions")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
  REFUNDED
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum NotificationType {
  PAYMENT
  SYSTEM
  WEBHOOK
}